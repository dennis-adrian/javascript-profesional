{"id":"ejercicios/proxy.html","dependencies":[{"name":"/Users/dennisguzman/dev/javascript-profesional/package.json","includedInParent":true,"mtime":1609958547419}],"generated":{"html":"<html>\n\n<head>\n  <title>Proxy</title>\n</head>\n\n<body>\n  <a href=\"/ejercicios/\">Go back</a>\n  <p><em>Abre la consola</em></p>\n\n  <script src=\"https://unpkg.com/fast-levenshtein@2.0.6/levenshtein.js\"></script>\n  <script>// Proxy es parecido a getters y setters\n// Usa un concepto que se llama traps: son interceptores de llamadas. A diferencia de getters, no opera sobre una propieda, si no sobre un objeto.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#Methods_of_the_handler_object\n// Creemos un ejemplo donde interceptamos llamadas para leer una propiedad\n// Si la propiedad existe, la regresamos\n// Si no existe, entonces sugerimos una que pueda funcionar\n// Para eso eso vamos a usar un algoritmo que se llama Levenshtein. (window.Levenshtein.get)\n// Ejemplos de levenshtein distance (usa window.Levenshtein)\nconst target = {\n  red: 'Rojo',\n  green: 'Verde',\n  blue: 'Azul'\n};\nconst handler = {\n  //get es una de las 'trampas' del handler \n  //que nos ayuda a interceptar un valor\n  //recibe el target y la propiedad que se quiere leer\n  get(obj, prop) {\n    //en caso de que exista la propiedad, sólo retornarmos el valor que se está buscanod\n    if (prop in obj) {\n      return obj[prop];\n    } //en caso de que no exista, buscamos una sugerencia \n\n\n    const suggestion = Object.keys(obj).find(key => {\n      //con Object.keys listamos todas las llaves el objeto\n      //y con el algoritomo Levenshtein buscamos qué llave\n      //se parece a la propiedad\n      return Levenshtein.get(key, prop) <= 3;\n    }); //si se encuentra una sugerencia, mandamos un mensaje y devolvemos el objeto\n\n    if (suggestion) {\n      console.log(`${prop} no se encontró. Quisiste decir ${suggestion}?`);\n    }\n\n    return obj[prop];\n  }\n\n}; //target es el objeto que queremos interceptar\n//handler es el que se encarga de manejar el target\n\nconst p = new Proxy(target, handler);</script>\n</body>\n\n</html>"},"sourceMaps":null,"error":null,"hash":"b1ddcb23046d43463117d25298a7e0ab","cacheData":{"env":{}}}