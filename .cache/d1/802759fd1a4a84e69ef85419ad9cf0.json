{"id":"ejercicios/generators.html","dependencies":[{"name":"/Users/dennisguzman/dev/javascript-profesional/package.json","includedInParent":true,"mtime":1609958547419}],"generated":{"html":"<html>\n\n<head>\n  <title>Generators</title>\n</head>\n\n<body>\n  <a href=\"/ejercicios/\">Go back</a>\n  <p><em>Abre la consola</em></p>\n\n  <script>// Los generadores son funciones de las que se puede salir y volver a entrar.\n// Su contexto (asociación de variables) será conservado entre las reentradas.\n// Cada vez que llamamos next, la ejecución del generador va a continuar hasta el proximo yield\n//para declarar un generador se lo hace con un asterísco al lado de la palabra 'function'\nfunction* simpleGenerator() {\n  console.log('Generator Start'); //'yield' hace que el resto del código no se ejecute hasta llamar a la función 'next()' nuevamente\n  //podemos tener la cantidad de 'yield' que queramos y retornar un valor en cada 'yield'\n\n  yield 1;\n  yield 2;\n  yield 3;\n  console.log('Generator End');\n} //un generador devuelve una función al ejecutarse\n//en estos momentos 'gen' está \"suspendido\"\n//const gen = simpleGenerator();\n//para continuar con su ejecución deberíamos usar la palabra clave 'next()'\n// Podemos hacer generadores infinitos.\n\n\nfunction* idMaker() {\n  let id = 1;\n\n  while (true) {\n    yield id;\n    id = id + 1;\n  }\n} // Cuando llamamos next también podemos pasar valores que la función recibe.\n// Ahora hagamos un ejemplo un poco más complejo: la secuencia fibonacci\n\n\nfunction* fibonacci() {\n  let a = 1;\n  let b = 1;\n\n  while (true) {\n    const nextNumber = a + b;\n    a = b;\n    b = nextNumber;\n    yield nextNumber;\n  }\n}</script>\n</body>\n\n</html>"},"sourceMaps":null,"error":null,"hash":"6aeb6e311f96a7d5340a0c35301de7db","cacheData":{"env":{}}}